services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: ${PG_DB}
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASS}
    ports:
      - "5432:5432"
    # volumes:
    #   - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_USER} -d ${PG_DB}"]
      interval: 5s
      retries: 5
      timeout: 5s
      start_period: 5s

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 5s
      retries: 10

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "${KAFKA_PORT}:${KAFKA_PORT}"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:${KAFKA_PORT}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://${KAFKA_HOST}:${KAFKA_PORT}
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD", "nc", "-z", "${KAFKA_HOST}", "${KAFKA_PORT}"]
      interval: 5s
      retries: 10

  orderbook:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        TARGETOS: linux
        TARGETARCH: amd64
        # PG_USER: ${PG_USER}
        # PG_PASS: ${PG_PASS}
        # PG_HOST: ${PG_HOST}
        # PG_DB: ${PG_DB}
    ports:
      - "${BE_PORT}:${BE_PORT}"
    environment:
      BE_PORT: ${BE_PORT}
      PG_USER: ${PG_USER}
      PG_PASS: ${PG_PASS}
      PG_HOST: ${PG_HOST}
      PG_DB: ${PG_DB}
      KAFKA_HOST: ${KAFKA_HOST}
      KAFKA_PORT: ${KAFKA_PORT}
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    entrypoint: >
      sh -c "./apply_migrations.sh && ./orderbook"
  
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=localhost:${BE_PORT}
    ports:
      - "${FE_PORT}:80"
    depends_on:
      - orderbook
# volumes:
#   pgdata:
